# utils/file_io.py
import os
import json
import re
import piexif
from datetime import datetime, timedelta
import random
import requests
import pytz

# --- C√ÅC H√ÄM ƒê·ªåC/GHI FILE V√Ä CONFIG ---

def load_config(config_path): # <--- Nh·∫≠n v√†o config_path
    """T·∫£i file config.json."""
    try:
        # S·ª¨A L·ªñI: D√πng ƒë√∫ng tham s·ªë config_path ƒë√£ ƒë∆∞·ª£c truy·ªÅn v√†o
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp c·∫•u h√¨nh t·∫°i '{config_path}'!")
        return {}
    except json.JSONDecodeError:
        print(f"L·ªói: File '{config_path}' kh√¥ng ph·∫£i l√† file JSON h·ª£p l·ªá.")
        return {}

def update_total_image_count(filepath, new_counts): # <--- Nh·∫≠n v√†o filepath
    """ƒê·ªçc, c·ªông d·ªìn v√† ghi l·∫°i file TotalImage.txt."""
    totals = {}
    try:
        # S·ª¨A L·ªñI: D√πng ƒë√∫ng tham s·ªë filepath ƒë√£ ƒë∆∞·ª£c truy·ªÅn v√†o
        with open(filepath, 'r', encoding='utf-8') as f:
            for line in f:
                if ':' in line:
                    parts = line.split(':', 1)
                    try:
                        totals[parts[0].strip()] = int(parts[1].strip())
                    except (ValueError, IndexError):
                        pass
    except FileNotFoundError:
        print(f"Kh√¥ng t√¨m th·∫•y file {os.path.basename(filepath)}, s·∫Ω t·∫°o file m·ªõi.")
    
    if not new_counts:
        print(f"Kh√¥ng c√≥ ·∫£nh m·ªõi n√†o ƒë∆∞·ª£c t·∫°o ƒë·ªÉ c·∫≠p nh·∫≠t {os.path.basename(filepath)}.")
        return

    for mockup, count in new_counts.items():
        totals[mockup] = totals.get(mockup, 0) + count
        
    try:
        # S·ª¨A L·ªñI: D√πng ƒë√∫ng tham s·ªë filepath ƒë√£ ƒë∆∞·ª£c truy·ªÅn v√†o
        with open(filepath, 'w', encoding='utf-8') as f:
            for mockup in sorted(totals.keys()):
                f.write(f"{mockup}: {totals[mockup]}\n")
        print(f"üìä ƒê√£ c·∫≠p nh·∫≠t t·ªïng s·ªë ·∫£nh trong {os.path.basename(filepath)}")
    except Exception as e:
        print(f"L·ªói khi ghi file {os.path.basename(filepath)}: {e}")


# --- C√ÅC H√ÄM X·ª¨ L√ù METADATA V√Ä TEXT ---

def clean_title(title, keywords):
    """D·ªçn d·∫πp ti√™u ƒë·ªÅ file d·ª±a tr√™n keywords."""
    cleaned_keywords = sorted([r'(?:-|\s)?'.join([re.escape(p) for p in re.split(r'[- ]', k.strip())]) for k in keywords], key=len, reverse=True)
    pattern = r'\b(' + '|'.join(cleaned_keywords) + r')\b'
    return re.sub(r'\s+', ' ', re.sub(pattern, '', title, flags=re.IGNORECASE).replace('-', ' ')).strip()

def should_globally_skip(filename, skip_keywords):
    """Ki·ªÉm tra filename c√≥ ch·ª©a t·ª´ kh√≥a skip to√†n c·ª•c kh√¥ng."""
    for keyword in skip_keywords:
        if re.search(r'\b' + re.escape(keyword) + r'\b', filename, re.IGNORECASE):
            print(f"Skipping (Global): '{filename}' ch·ª©a t·ª´ kh√≥a b·ªã c·∫•m '{keyword}'.")
            return True
    return False

def _convert_to_gps(value, is_longitude):
    abs_value = abs(value)
    ref = ('E' if value >= 0 else 'W') if is_longitude else ('N' if value >= 0 else 'S')
    degrees = int(abs_value)
    minutes_float = (abs_value - degrees) * 60
    minutes = int(minutes_float)
    seconds_float = (minutes_float - minutes) * 60
    return {
        'value': ((degrees, 1), (minutes, 1), (int(seconds_float * 100), 100)),
        'ref': ref.encode('ascii')
    }

def create_exif_data(prefix, final_filename, exif_defaults):
    domain_exif = prefix + ".com"
    digitized_time = datetime.now() - timedelta(hours=2)
    original_time = digitized_time - timedelta(seconds=random.randint(3600, 7500))
    digitized_str = digitized_time.strftime("%Y:%m:%d %H:%M:%S")
    original_str = original_time.strftime("%Y:%m:%d %H:%M:%S")
    try:
        zeroth_ifd = {
            piexif.ImageIFD.Artist: domain_exif.encode('utf-8'),
            piexif.ImageIFD.Copyright: domain_exif.encode('utf-8'),
            piexif.ImageIFD.ImageDescription: final_filename.encode('utf-8'),
            piexif.ImageIFD.Software: exif_defaults.get("Software", "Adobe Photoshop 25.0").encode('utf-8'),
            piexif.ImageIFD.DateTime: digitized_str.encode('utf-8'),
            piexif.ImageIFD.Make: exif_defaults.get("Make", "").encode('utf-8'),
            piexif.ImageIFD.Model: exif_defaults.get("Model", "").encode('utf-8'),
            piexif.ImageIFD.XPAuthor: domain_exif.encode('utf-16le'),
            piexif.ImageIFD.XPComment: final_filename.encode('utf-16le'),
            piexif.ImageIFD.XPSubject: final_filename.encode('utf-16le'),
            piexif.ImageIFD.XPKeywords: (prefix + ";" + "shirt;").encode('utf-16le')
        }
        exif_ifd = {
            piexif.ExifIFD.DateTimeOriginal: original_str.encode('utf-8'),
            piexif.ExifIFD.DateTimeDigitized: digitized_str.encode('utf-8'),
            piexif.ExifIFD.FNumber: tuple(exif_defaults.get("FNumber", [0,1])),
            piexif.ExifIFD.ExposureTime: tuple(exif_defaults.get("ExposureTime", [0,1])),
            piexif.ExifIFD.ISOSpeedRatings: exif_defaults.get("ISOSpeedRatings", 0),
            piexif.ExifIFD.FocalLength: tuple(exif_defaults.get("FocalLength", [0,1]))
        }
        gps_ifd = {}
        lat, lon = exif_defaults.get("GPSLatitude"), exif_defaults.get("GPSLongitude")
        if lat is not None and lon is not None:
            gps_lat_data, gps_lon_data = _convert_to_gps(lat, False), _convert_to_gps(lon, True)
            gps_ifd.update({
                piexif.GPSIFD.GPSLatitude: gps_lat_data['value'], piexif.GPSIFD.GPSLatitudeRef: gps_lat_data['ref'],
                piexif.GPSIFD.GPSLongitude: gps_lon_data['value'], piexif.GPSIFD.GPSLongitudeRef: gps_lon_data['ref']
            })
        return piexif.dump({"0th": zeroth_ifd, "Exif": exif_ifd, "GPS": gps_ifd})
    except Exception as e:
        print(f"L·ªói khi t·∫°o d·ªØ li·ªáu EXIF: {e}")
        return b''

def find_mockup_image(mockup_dir, mockup_name, color):
    """
    T√¨m file ·∫£nh mockup trong th∆∞ m·ª•c ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.
    H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng .jpg, .webp, .png.
    """
    for ext in ['.jpg', '.webp', '.png']:
        filepath = os.path.join(mockup_dir, f"{mockup_name}_{color}{ext}")
        if os.path.exists(filepath):
            return filepath
    return None

# Th√™m h√†m m·ªõi n√†y v√†o cu·ªëi file
def send_telegram_summary(tool_name, total_image_file_path):
    """
    G·ª≠i b√°o c√°o t√≥m t·∫Øt ch·ª©a n·ªôi dung c·ªßa file TotalImage.txt qua Telegram.
    """
    print(f"‚úàÔ∏è  Chu·∫©n b·ªã g·ª≠i b√°o c√°o Telegram cho tool: {tool_name}...")
    
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID_CN")

    if not token or not chat_id:
        print("‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng Telegram. B·ªè qua vi·ªác g·ª≠i b√°o c√°o.")
        return

    # 1. T·∫°o ti√™u ƒë·ªÅ v√† timestamp
    header = f"--- Summary of Last {tool_name} Run ---"
    timestamp = datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime('%Y-%m-%d %H:%M:%S %z')

    # 2. ƒê·ªçc n·ªôi dung file TotalImage.txt
    try:
        with open(total_image_file_path, 'r', encoding='utf-8') as f:
            total_content = f.read().strip()
        if not total_content:
            total_content = "Ch∆∞a c√≥ d·ªØ li·ªáu."
    except FileNotFoundError:
        total_content = "File TotalImage.txt ch∆∞a ƒë∆∞·ª£c t·∫°o."

    # 3. Gh√©p th√†nh n·ªôi dung tin nh·∫Øn cu·ªëi c√πng
    message = f"{header}\nTimestamp: {timestamp}\n\n{total_content}"

    # 4. G·ª≠i tin nh·∫Øn
    try:
        response = requests.post(
            f"https://api.telegram.org/bot{token}/sendMessage",
            data={'chat_id': chat_id, 'text': message},
            timeout=10
        )
        response.raise_for_status()
        print("‚úÖ G·ª≠i b√°o c√°o t·ªõi Telegram th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i b√°o c√°o t·ªõi Telegram: {e}")