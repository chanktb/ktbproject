# ktbcreator/main.py

import os
import json
from datetime import datetime
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv

# Import c√°c h√†m t·ª´ module d√πng chung
from utils.image_processing import (
    remove_background,
    remove_background_advanced,
    trim_transparent_background,
    apply_mockup,
    add_watermark,
    rotate_image,
    crop_by_coords # <<< Th√™m import n√†y
)
from utils.file_io import (
    load_config,
    create_exif_data,
    update_total_image_count,
    find_mockup_image,
    send_telegram_summary
)

# --- C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ---
TOOL_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(TOOL_DIR)
load_dotenv(dotenv_path=os.path.join(PROJECT_ROOT, '.env'))

# ƒê∆∞·ªùng d·∫´n t√†i nguy√™n chung
CONFIG_FILE = os.path.join(PROJECT_ROOT, "config.json")
MOCKUP_DIR = os.path.join(PROJECT_ROOT, "mockup")
WATERMARK_DIR = os.path.join(PROJECT_ROOT, "watermark")
FONT_FILE = os.path.join(PROJECT_ROOT, "fonts", "verdanab.ttf")

# ƒê∆∞·ªùng d·∫´n ri√™ng c·ªßa tool
INPUT_DIR = os.path.join(TOOL_DIR, "InputImage")
OUTPUT_DIR = os.path.join(TOOL_DIR, "OutputImage")
TOTAL_IMAGE_FILE = os.path.join(TOOL_DIR, "TotalImage.txt")

# --- C√ÅC H√ÄM H·ªñ TR·ª¢ RI√äNG C·ª¶A TOOL N√ÄY ---

def get_creator_inputs(available_mockups):
    """H·ªèi ng∆∞·ªùi d√πng c√°c t√πy ch·ªçn cho tool KTB-CREATOR (phi√™n b·∫£n r√∫t g·ªçn)."""
    print("-" * 50)
    
    # <<< THAY ƒê·ªîI: G·ªôp c√¢u h·ªèi crop l√†m m·ªôt >>>
    crop_coords = None
    while True:
        try:
            # H·ªèi m·ªôt c√¢u duy nh·∫•t
            coords_str = input('‚ñ∂Ô∏è Nh·∫≠p t·ªça ƒë·ªô crop (v√≠ d·ª•: {"x":100,"y":100,"w":500,"h":600}) ho·∫∑c Enter ƒë·ªÉ b·ªè qua: ')
            
            # N·∫øu ng∆∞·ªùi d√πng nh·∫•n Enter, b·ªè qua v√† tho√°t v√≤ng l·∫∑p
            if not coords_str.strip():
                print("  - B·ªè qua b∆∞·ªõc crop.")
                break
            
            # N·∫øu ng∆∞·ªùi d√πng nh·∫≠p, th·ª≠ ph√¢n t√≠ch JSON
            crop_coords = json.loads(coords_str.replace("'", '"'))
            if all(k in crop_coords for k in ['x', 'y', 'w', 'h']):
                print(f"‚úÖ S·∫Ω crop ·∫£nh theo t·ªça ƒë·ªô: {crop_coords}")
                break
            else:
                print("  L·ªói: T·ªça ƒë·ªô ph·∫£i ch·ª©a ƒë·ªß c√°c key 'x', 'y', 'w', 'h'.")
        except (json.JSONDecodeError, TypeError):
            print("  L·ªói: ƒê·ªãnh d·∫°ng t·ªça ƒë·ªô kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")

    # H·ªèi g√≥c xoay
    while True:
        try:
            angle_str = input("‚ñ∂Ô∏è Nh·∫≠p g√≥c xoay (v√≠ d·ª•: -10, 5). Nh·∫•n Enter ƒë·ªÉ kh√¥ng xoay: ")
            angle = int(angle_str) if angle_str else 0
            break
        except ValueError:
            print("L·ªói: Vui l√≤ng ch·ªâ nh·∫≠p s·ªë nguy√™n.")

    # H·ªèi ch·ªçn mockup set
    print("\nüìú C√°c mockup set c√≥ s·∫µn:")
    mockup_list = list(available_mockups.keys())
    for i, name in enumerate(mockup_list):
        print(f"  {i + 1}: {name}")

    while True:
        try:
            choices_str = input("‚ñ∂Ô∏è Ch·ªçn c√°c mockup set, c√°ch nhau b·ªüi d·∫•u ph·∫©y (v√≠ d·ª•: 1, 3, 4): ")
            if not choices_str:
                print("L·ªói: Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt mockup."); continue
            selected_indices = [int(i.strip()) - 1 for i in choices_str.split(',')]
            selected_mockups = [mockup_list[i] for i in selected_indices if 0 <= i < len(mockup_list)]
            if selected_mockups:
                print(f"‚úÖ B·∫°n ƒë√£ ch·ªçn: {', '.join(selected_mockups)}"); break
            else:
                print("L·ªói: L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except (ValueError, IndexError):
            print("L·ªói: Vui l√≤ng ch·ªâ nh·∫≠p c√°c s·ªë h·ª£p l·ªá.")

    print("-" * 50)
    return crop_coords, angle, selected_mockups

def cleanup_input_directory(directory, processed_files_list):
    """X√≥a c√°c file ƒë√£ x·ª≠ l√Ω trong th∆∞ m·ª•c Input."""
    print(f"\n--- üóëÔ∏è  D·ªçn d·∫πp th∆∞ m·ª•c: {directory} ---")
    if not os.path.exists(directory): return
    for filename in processed_files_list:
        try:
            os.unlink(os.path.join(directory, filename))
            print(f"  - ƒê√£ x√≥a: {filename}")
        except Exception as e:
            print(f'L·ªói khi x√≥a {filename}. L√Ω do: {e}')

# --- H√ÄM MAIN CH√çNH ---
def main():
    print("üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh c·ªßa KTB-CREATOR...")
    
    for dir_path in [OUTPUT_DIR, INPUT_DIR, MOCKUP_DIR]:
        if not os.path.exists(dir_path): os.makedirs(dir_path)
    
    configs = load_config(CONFIG_FILE)
    if not configs: return
        
    defaults = configs.get("defaults", {})
    mockup_sets_config = configs.get("mockup_sets", {})
    exif_defaults = defaults.get("exif_defaults", {})
    output_format = defaults.get("global_output_format", "webp")
    
    images_to_process = [f for f in os.listdir(INPUT_DIR) if os.path.isfile(os.path.join(INPUT_DIR, f)) and not f.startswith('.')]
    if not images_to_process:
        print("‚úÖ Kh√¥ng c√≥ ·∫£nh m·ªõi ƒë·ªÉ x·ª≠ l√Ω."); return

    # <<< THAY ƒê·ªîI: Nh·∫≠n th√™m `crop_coords` t·ª´ ng∆∞·ªùi d√πng >>>
    crop_coords, global_angle, selected_mockups = get_creator_inputs(mockup_sets_config)

    print(f"üîé T√¨m th·∫•y {len(images_to_process)} ·∫£nh, s·∫Ω √°p d·ª•ng {len(selected_mockups)} mockup ƒë√£ ch·ªçn.")
    images_for_output = {}
    total_processed_this_run = {}
    run_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

    for image_filename in images_to_process:
        print(f"\n--- üñºÔ∏è  ƒêang x·ª≠ l√Ω: {image_filename} ---")
        try:
            with Image.open(os.path.join(INPUT_DIR, image_filename)) as img:
                img_rgba = img.convert("RGBA")

                # <<< THAY ƒê·ªîI: Th·ª±c hi·ªán crop n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu >>>
                if crop_coords:
                    print(f"  - Cropping ·∫£nh theo t·ªça ƒë·ªô: {crop_coords}")
                    processed_img = crop_by_coords(img_rgba, crop_coords)
                    if not processed_img:
                        print("  - ‚ö†Ô∏è L·ªói khi crop, b·ªè qua ·∫£nh n√†y.")
                        continue
                else:
                    processed_img = img_rgba

                # C√°c b∆∞·ªõc x·ª≠ l√Ω ti·∫øp theo s·∫Ω √°p d·ª•ng tr√™n `processed_img`
                try:
                    pixel = processed_img.getpixel((1, processed_img.height - 2))
                    is_white = sum(pixel[:3]) / 3 > 210
                except IndexError:
                    is_white = True
                
                # Ch·ªçn ph∆∞∆°ng ph√°p t√°ch n·ªÅn
                # bg_removed = remove_background(processed_img)
                bg_removed = remove_background_advanced(processed_img)

                final_design = rotate_image(bg_removed, global_angle)
                trimmed_img = trim_transparent_background(final_design)
                if not trimmed_img:
                    print("  - ‚ö†Ô∏è C·∫£nh b√°o: ·∫¢nh tr·ªëng sau khi x·ª≠ l√Ω, b·ªè qua."); continue

                for mockup_name in selected_mockups:
                    # ... (Ph·∫ßn code gh√©p mockup, t·∫°o file, l∆∞u tr·ªØ... gi·ªØ nguy√™n nh∆∞ c≈©) ...
                    mockup_config = mockup_sets_config.get(mockup_name)
                    if not mockup_config: continue
                    print(f"  - √Åp d·ª•ng mockup: '{mockup_name}'")
                    mockup_path = find_mockup_image(MOCKUP_DIR, mockup_name, "white" if is_white else "black")
                    if not mockup_path: print(f"    - ‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file ·∫£nh mockup. B·ªè qua."); continue
                    with Image.open(mockup_path) as mockup_img:
                        final_mockup = apply_mockup(trimmed_img, mockup_img, mockup_config.get("coords"))
                        watermark_desc = mockup_config.get("watermark_text")
                        final_mockup_with_wm = add_watermark(final_mockup, watermark_desc, WATERMARK_DIR, FONT_FILE)
                        prefix = mockup_config.get("title_prefix_to_add", "")
                        suffix = mockup_config.get("title_suffix_to_add", "")
                        base_name = os.path.splitext(image_filename)[0].replace('-', ' ').replace('_', ' ')
                        final_filename_base = f"{prefix} {base_name} {suffix}".strip().replace('  ', ' ')
                        ext = f".{output_format}"
                        final_filename = f"{final_filename_base}{ext}"
                        image_to_save = final_mockup_with_wm.convert('RGB')
                        exif_bytes = create_exif_data(mockup_name, final_filename, exif_defaults)
                        img_byte_arr = BytesIO()
                        save_format = "WEBP" if output_format == "webp" else "JPEG"
                        image_to_save.save(img_byte_arr, format=save_format, quality=90, exif=exif_bytes)
                        images_for_output.setdefault(mockup_name, []).append((final_filename, img_byte_arr.getvalue()))
                        total_processed_this_run[mockup_name] = total_processed_this_run.get(mockup_name, 0) + 1
        
        except Exception as e:
            print(f"‚ùå L·ªói nghi√™m tr·ªçng khi x·ª≠ l√Ω file {image_filename}: {e}")

    # ... (Ph·∫ßn code l∆∞u file, d·ªçn d·∫πp, g·ª≠i telegram gi·ªØ nguy√™n) ...
    if images_for_output:
        print("\n--- üíæ B·∫Øt ƒë·∫ßu l∆∞u ·∫£nh v√†o c√°c th∆∞ m·ª•c ---")
        for mockup_name, image_list in images_for_output.items():
            output_subdir_name = f"{mockup_name}.{run_timestamp}.{len(image_list)}"
            output_path = os.path.join(OUTPUT_DIR, output_subdir_name)
            os.makedirs(output_path, exist_ok=True)
            print(f"  - ƒêang t·∫°o v√† l∆∞u {len(image_list)} ·∫£nh v√†o: {output_path}")
            for filename, data in image_list:
                with open(os.path.join(output_path, filename), 'wb') as f:
                    f.write(data)

    if images_to_process:
        cleanup_input_directory(INPUT_DIR, images_to_process)

    if total_processed_this_run:
        update_total_image_count(TOTAL_IMAGE_FILE, total_processed_this_run)
    
    print(f"\n--- ‚ú® Ho√†n t·∫•t! ---")
    send_telegram_summary("ktbcreator", TOTAL_IMAGE_FILE)

if __name__ == "__main__":
    main()